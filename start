#!./node_modules/coffee-script/bin/coffee

log	= require( "logging" ).from __filename
fs	= require "fs"
async	= require "async"
util	= require "util"
path	= require "path"

config	= { }

async.series [ ( cb ) ->
		log "Parsing config.."
		fs.readFile "config.json", ( err, data ) ->
			if err
				return cb err
			try
				config = JSON.parse data
				return cb null
			catch err
				return cb err
	, ( cb ) ->
		log "Validating config.."
		async.map [ "port", "directories", "echonest_api_key" ], ( req, cb ) ->
			if not config[req]?
				return cb "Field #{req} not found."
			cb null
		, ( err, res ) ->
			if err
				return cb err
			cb null
	, ( cb ) ->
		log "Searching directories for files.."

		recursive_find = ( directory, cb ) ->
			fs.readdir directory, ( err, items ) ->
				if err
					return cb err
				async.map items, ( item, cb ) ->
					item_path = path.join directory, item
					fs.stat item_path, ( err, item_stat ) ->
						if err
							return cb err
						if item_stat.isDirectory()
							recursive_find item_path, ( err, files ) ->
								if err
									return cb err
								return cb null, files

							return

						if item_stat.isFile() and item_path.indexOf( ".mp3" ) is item_path.length - ".mp3".length
							return cb null, [ item_path ]

						cb( )
				, ( err, file_arrays ) ->
					if err
						return cb err

					_r = [ ]
					async.each file_arrays, ( file_array, cb ) ->
						if not file_array
							return cb( )
						_r.push file for file in file_array when file not in _r
						return cb( )
					, ( err ) ->
						return cb null, _r


		async.map config['directories'], recursive_find, ( err, file_arrays ) ->
			if err
				return cb err

			# Because the recursive find function returns an array, we now have an array of arrays..
			# Merge them all back into a single one, getting rid of duplicates.
			
			files = [ ]
			async.each file_arrays, ( file_array, cb ) ->
				if not file_array
					return cb( )
				files.push file for file in file_array when file not in files
				return cb( )
			, ( err ) ->
				# At this point go and check to see if all the files are known..
				# TODO
				log "Files are now #{util.inspect files}"
				return cb null
	], ( err, res ) ->
		if err
			log "Unable to startup: #{err}"
			process.exit 1
		log "Startup complete!"

